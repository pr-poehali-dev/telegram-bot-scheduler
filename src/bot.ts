import { Telegraf, Context, session } from 'telegraf';
import { message } from 'telegraf/filters';

interface SessionData {
  phoneNumber: string | null;
  subscribedChats: string[];
  subscriptionEndDate: Date | null;
  waitingForText: boolean;
  waitingForDelay: boolean;
  messageText: string | null;
}

interface BotContext extends Context {
  session: SessionData;
}

const ADMIN_USER_ID = 123456789; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
const token = '7543252541:AAFxRxyQC-PyZo5X_tgZE23HPC2Tv7CI49U';
const bot = new Telegraf<BotContext>(token);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session({
  defaultSession: () => ({
    phoneNumber: null,
    subscribedChats: [],
    subscriptionEndDate: null,
    waitingForText: false,
    waitingForDelay: false,
    messageText: null
  })
}));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
const getMainKeyboard = () => {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }],
        [{ text: 'üì± –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }],
        [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏' }, { text: 'üí¨ –ú–æ–∏ —á–∞—Ç—ã' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
      ],
      resize_keyboard: true
    }
  };
};

// –ö–æ–º–∞–Ω–¥–∞ start
bot.start(async (ctx) => {
  const firstName = ctx.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!\n\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã –∏ —á–∞—Ç—ã Telegram.\n\n` +
    `‚úÖ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n` +
    `‚úÖ –ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n` +
    `‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /text –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n` +
    `‚ùóÔ∏è –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 2 —á–∞—Ç–∞`,
    getMainKeyboard()
  );
});

// –ö–æ–º–∞–Ω–¥–∞ help
bot.help(async (ctx) => {
  await ctx.reply(
    'üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n' +
    '‚Ä¢ /register - –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
    '‚Ä¢ /text - –°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '‚Ä¢ /status - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n' +
    '‚Ä¢ /chats - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n' +
    '‚ùì –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω—É–∂–Ω—ã–µ –≤–∞–º –≥—Ä—É–ø–ø—ã –∏ —á–∞—Ç—ã.',
    { parse_mode: 'Markdown', ...getMainKeyboard() }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.command('register', async (ctx) => {
  await requestContact(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async function requestContact(ctx: BotContext) {
  await ctx.reply('üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', {
    reply_markup: {
      keyboard: [
        [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
      ],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on(message('contact'), async (ctx) => {
  const contact = ctx.message.contact;
  
  if (contact && contact.user_id === ctx.from.id) {
    ctx.session.phoneNumber = contact.phone_number;
    await ctx.reply(
      `‚úÖ –í–∞—à –Ω–æ–º–µ—Ä *${contact.phone_number}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`,
      { parse_mode: 'Markdown', ...getMainKeyboard() }
    );
  } else {
    await ctx.reply(
      '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç',
      getMainKeyboard()
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function startCreateDelayedMessage(ctx: BotContext) {
  if (!ctx.session.phoneNumber) {
    return ctx.reply(
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register',
      getMainKeyboard()
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type === 'private') {
    return ctx.reply(
      '‚ùóÔ∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —á–∞—Ç–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      getMainKeyboard()
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const chatId = ctx.chat.id.toString();
  
  if (!ctx.session.subscribedChats.includes(chatId)) {
    if (ctx.session.subscribedChats.length >= 2 && !ctx.session.subscriptionEndDate) {
      return ctx.reply(
        '‚ùå –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –¥–≤—É—Ö —á–∞—Ç–∞—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.',
        getMainKeyboard()
      );
    }
    
    ctx.session.subscribedChats.push(chatId);
    await ctx.reply('‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤!');
  }

  ctx.session.waitingForText = true;
  await ctx.reply(
    'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π:',
    {
      reply_markup: {
        keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]],
        resize_keyboard: true
      }
    }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ text –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.command('text', async (ctx) => {
  await startCreateDelayedMessage(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on(message('text'), async (ctx) => {
  const text = ctx.message.text;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
  if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
    ctx.session.waitingForText = false;
    ctx.session.waitingForDelay = false;
    ctx.session.messageText = null;
    return ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', getMainKeyboard());
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (text === 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    if (ctx.chat.type === 'private') {
      return ctx.reply(
        '‚ùóÔ∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–º –∫–æ–º–∞–Ω–¥—É /text',
        getMainKeyboard()
      );
    } else {
      return startCreateDelayedMessage(ctx);
    }
  }

  if (text === 'üì± –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞') {
    return requestContact(ctx);
  }

  if (text === 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏') {
    return showStatus(ctx);
  }

  if (text === 'üí¨ –ú–æ–∏ —á–∞—Ç—ã') {
    return showChats(ctx);
  }

  if (text === '‚ùì –ü–æ–º–æ—â—å') {
    return ctx.help();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (ctx.session.waitingForText) {
    ctx.session.messageText = text;
    ctx.session.waitingForText = false;
    ctx.session.waitingForDelay = true;
    
    await ctx.reply(
      '‚è± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É):',
      {
        reply_markup: {
          keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]],
          resize_keyboard: true
        }
      }
    );
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
  if (ctx.session.waitingForDelay && ctx.session.messageText) {
    const delaySeconds = parseInt(text);

    if (isNaN(delaySeconds) || delaySeconds <= 0) {
      await ctx.reply(
        '‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
        {
          reply_markup: {
            keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]],
            resize_keyboard: true
          }
        }
      );
      return;
    }

    const messageText = ctx.session.messageText;
    const chatId = ctx.chat.id;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    ctx.session.waitingForDelay = false;
    ctx.session.messageText = null;

    await ctx.reply(
      `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${delaySeconds} —Å–µ–∫—É–Ω–¥`,
      getMainKeyboard()
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(async () => {
      try {
        await ctx.telegram.sendMessage(chatId, messageText);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (ctx.from) {
          await ctx.telegram.sendMessage(
            ctx.from.id,
            `‚úÖ –í–∞—à–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç "${ctx.chat.title || '–ì—Ä—É–ø–ø—É'}"`
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        if (ctx.from) {
          await ctx.telegram.sendMessage(
            ctx.from.id,
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç "${ctx.chat.title || '–ì—Ä—É–ø–ø—É'}"`
          );
        }
      }
    }, delaySeconds * 1000);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function showStatus(ctx: BotContext) {
  const subscriptionStatus = ctx.session.subscriptionEndDate 
    ? `–ü—Ä–µ–º–∏—É–º –¥–æ: ${ctx.session.subscriptionEndDate.toLocaleDateString()}`
    : '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 2 —á–∞—Ç–∞)';
  
  await ctx.reply(
    `üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n` +
    `${subscriptionStatus}\n\n` +
    `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: ${ctx.session.subscribedChats.length}`,
    { parse_mode: 'Markdown', ...getMainKeyboard() }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.command('status', async (ctx) => {
  await showStatus(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
async function showChats(ctx: BotContext) {
  if (ctx.session.subscribedChats.length === 0) {
    return ctx.reply(
      'üí¨ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–º –∫–æ–º–∞–Ω–¥—É /text',
      getMainKeyboard()
    );
  }

  const chatsList = await Promise.all(ctx.session.subscribedChats.map(async (chatId, index) => {
    try {
      const chat = await ctx.telegram.getChat(chatId);
      return `${index + 1}. ${chat.title || chat.username || chatId}`;
    } catch (error) {
      return `${index + 1}. –ß–∞—Ç ${chatId} (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)`;
    }
  }));

  await ctx.reply(
    `üí¨ *–í–∞—à–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:*\n\n${chatsList.join('\n')}`,
    { parse_mode: 'Markdown', ...getMainKeyboard() }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ chats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
bot.command('chats', async (ctx) => {
  await showChats(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ add –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏)
bot.command('add', async (ctx) => {
  if (ctx.from.id !== ADMIN_USER_ID) {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', getMainKeyboard());
  }

  const args = ctx.message.text.split(' ');
  if (args.length !== 3) {
    return ctx.reply(
      '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add [username] [days]',
      getMainKeyboard()
    );
  }

  const username = args[1].replace('@', '');
  const days = parseInt(args[2]);

  if (isNaN(days) || days <= 0) {
    return ctx.reply(
      '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
      getMainKeyboard()
    );
  }

  try {
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    const user = await ctx.telegram.getChatMember(`@${username}`, ADMIN_USER_ID)
      .then(() => username)
      .catch(() => null);

    if (!user) {
      return ctx.reply(
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        getMainKeyboard()
      );
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    await ctx.reply(
      `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`,
      getMainKeyboard()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏',
      getMainKeyboard()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
bot.on('new_chat_members', async (ctx) => {
  const newMembers = ctx.message.new_chat_members;
  const botInfo = await ctx.telegram.getMe();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à –±–æ—Ç
  if (newMembers.some(member => member.id === botInfo.id)) {
    await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n` +
      `–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /text\n\n` +
      `‚ùóÔ∏è –í–∞–∂–Ω–æ: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.`
    );
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((error, ctx) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
